name: CI/CD Pipeline

on:
  # Trigger on pull requests to main branch
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

  # Trigger on pushes to main branch
  push:
    branches: [ main ]

  # Allow manual workflow runs
  workflow_dispatch:

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff==0.5.7 pre-commit==3.7.1
        pip install -r requirements.txt

    - name: Run Ruff linter
      run: |
        ruff check app/ --output-format=github

    - name: Run Ruff formatter check
      run: |
        ruff format app/ --check

    - name: Python syntax check
      run: |
        python -m py_compile app/*.py

    - name: Import validation
      run: |
        python -c "from app.main import app; print('âœ… All imports successful')"

  # Type Checking
  type-check:
    name: Type Checking
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mypy types-requests
        pip install -r requirements.txt

    - name: Run MyPy type checking
      run: |
        mypy app/ --ignore-missing-imports --no-strict-optional

  # Build and Test
  test:
    name: Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio httpx pytest-cov
        pip install -r requirements.txt

    - name: Create test environment file
      run: |
        echo "CHROMADB_PATH=./test_chroma_db" > .env
        echo "EMBEDDING_MODEL=all-MiniLM-L6-v2" >> .env
        echo "MODEL_SLUG=openai/gpt-3.5-turbo" >> .env
        echo "OPENROUTER_API_KEY=test-key" >> .env

    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
      env:
        PYTHONPATH: .

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, type-check]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test environment
      run: |
        echo "CHROMADB_PATH=./integration_test_db" > .env
        echo "EMBEDDING_MODEL=all-MiniLM-L6-v2" >> .env
        echo "MODEL_SLUG=openai/gpt-3.5-turbo" >> .env
        echo "OPENROUTER_API_KEY=test-key" >> .env

    - name: Run integration tests
      run: |
        python test_system.py
      timeout-minutes: 10

    - name: Test API endpoints
      run: |
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/ || exit 1
        curl -f http://localhost:8000/health || exit 1
      timeout-minutes: 5

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install safety
      run: pip install safety

    - name: Run safety check
      run: |
        pip install -r requirements.txt
        safety check --json || true

    - name: Run bandit security linter
      uses: securecodewarrior/github-action-bandit@v1
      with:
        args: '-r app/ -f json -o bandit-report.json'

    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: rag-system:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d --name rag-test \
          -p 8000:8000 \
          -e CHROMADB_PATH=/app/test_db \
          -e EMBEDDING_MODEL=all-MiniLM-L6-v2 \
          -e MODEL_SLUG=openai/gpt-3.5-turbo \
          -e OPENROUTER_API_KEY=test-key \
          rag-system:test

        sleep 15

        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1

        # Cleanup
        docker stop rag-test

  # Pre-commit hooks validation
  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pre-commit

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files

  # Dependency Check
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-audit
      run: pip install pip-audit

    - name: Run dependency audit
      run: |
        pip-audit --requirement requirements.txt --format=json --output=audit-report.json || true

    - name: Upload audit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-audit-report
        path: audit-report.json

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, integration-test, docker-build]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deployment readiness summary
      run: |
        echo "ðŸŽ‰ All checks passed! This PR is ready for deployment."
        echo "âœ… Code quality checks passed"
        echo "âœ… Type checking passed"
        echo "âœ… Unit tests passed"
        echo "âœ… Integration tests passed"
        echo "âœ… Docker build successful"
        echo ""
        echo "ðŸ“‹ Deployment checklist:"
        echo "- [ ] Review code changes"
        echo "- [ ] Verify test coverage"
        echo "- [ ] Check for breaking changes"
        echo "- [ ] Update documentation if needed"
        echo "- [ ] Approve and merge PR"
